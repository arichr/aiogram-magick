var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p> Aiogram Magick <p> </p> <p>Magick for Aiogram 3.x-based Telegram bots.</p> <p> </p> </p> <p>Compontents:</p> <ul> <li>SQLite-based storage with caching &amp; automatic commits</li> </ul>"},{"location":"index.html#getting-started","title":"Getting started!","text":"<ol> <li>Install <code>aiogram_magick</code> and dependencies for submodules: <pre><code>pip install aiogram_magick\n\n# For aiogram_magick.sqlite\npip install aiosqlite jsonpickle\n</code></pre></li> <li>Import submodules that provide needed functionality (see examples below or read documentation)</li> </ol>"},{"location":"index.html#examples","title":"Examples","text":""},{"location":"index.html#sqlite-storage","title":"SQLite storage","text":"<pre><code>from aiogram_magick.sqlite import SqliteStorage\n\n# By default, SqliteStorage is configured to:\n#    - Commit changes on 30 minute idle and on shutdown;\n#    - Cache states (up to 20 entries) and data (up to 10 entries);\n#    - Ignore any exceptions;\n#    - To avoid file corruptions on shutdown any `sqlite3.OperationalError`s\n#      are printed using `traceback.print_exception` instead of raised normally.\ndp = Dispatcher(storage=SqliteStorage('aiogram.sqlite'))\n</code></pre>"},{"location":"1_-_Installation.html","title":"Installation","text":"<p>Poetry can be used to install Aiogram Magick into your current environment: <pre><code>$ poetry add aiogram_magick\n</code></pre> Dependencies for each module are available as groups: <pre><code>$ poetry add aiogram_magick[sqlite]\n</code></pre></p> <p>Alternatively, you can still use Pip:</p> <pre><code>$ pip install aiogram_magick\n\n$ # For aiogram_magisk.sqlite\n$ pip install aiosqlite jsonpickle\n</code></pre>"},{"location":"1_-_Installation.html#unstable-versions","title":"Unstable versions","text":"<p>Python wheels are built on every successful commit on <code>main</code> or <code>dev</code>. You can find artifacts here.</p>"},{"location":"2_-_SQLite_storage.html","title":"SQLite storage","text":"<pre><code>from aiogram_magick.sqlite import SqliteStorage\n\n# By default, SqliteStorage is configured to:\n#    - Commit changes on 30 minute idle and on shutdown;\n#    - Cache states (up to 20 entries) and data (up to 10 entries);\n#    - Ignore any exceptions;\n#    - To avoid file corruptions on shutdown any `sqlite3.OperationalError`s\n#      are printed using `traceback.print_exception` instead of raised normally.\ndp = Dispatcher(storage=SqliteStorage('aiogram.sqlite'))\n</code></pre>"},{"location":"2_-_SQLite_storage.html#configuration","title":"Configuration","text":""},{"location":"2_-_SQLite_storage.html#database-path","title":"Database path","text":"<pre><code>SqliteStorage('/path/to/database/file.sqlite')\n</code></pre>"},{"location":"2_-_SQLite_storage.html#commit-frequency","title":"Commit frequency","text":"<p>By default, <code>SqliteStorage</code> commits changes (internally saved in <code>__commit</code>) on:</p> <ul> <li>the first request of changing a state or data;</li> <li>After <code>idle_to_commit</code> seconds of idling between either <code>set_state()</code>, <code>set_data()</code> or <code>update_data()</code>;</li> <li><code>close()</code>.</li> </ul>"},{"location":"2_-_SQLite_storage.html#key-factory","title":"Key factory","text":"<p><code>SqliteStorage</code> does not provide an option to configure the key factory that is used for storing keys in the database. It also does not use <code>aiogram.fsm.storage.base.DefaultKeyFactory</code> nor bases on it. The reason is simple: <code>DefaultKeyFactory</code> does not provide a method to convert <code>str</code> back to <code>StorageKey</code> that can be used to save data between reloads.</p> <p><code>__key_to_sqlite</code> and <code>__sqlite_to_key</code> uses this format to work with <code>StorageKey</code>s: <pre><code>&lt;bot id&gt;:&lt;chat id&gt;:&lt;user id&gt;\n</code></pre></p> Warning <p><code>thread_id</code>, <code>business_connection_id</code> and <code>destiny</code> fields of <code>StorageKey</code> are ignored.</p>"},{"location":"2_-_SQLite_storage.html#api-reference","title":"API Reference","text":"<p>SQLite-based storage with caching &amp; automatic commits for Aiogram 3.x.</p>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorage","title":"SqliteStorage","text":"<pre><code>SqliteStorage(filepath, idle_to_commit=1800)\n</code></pre> <p>               Bases: <code>BaseStorage</code></p> <p>SQLite FSM storage.</p> <p>Initalize a SQLite-based storage.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to the database file</p> required <code>idle_to_commit</code> <code>int</code> <p>Frequency of idling to commit changes (in seconds). It it notable to mention that regardless of this value all changes will be saved anyway when <code>self.close()</code> is called. Defaults to <code>1800</code>.</p> <code>1800</code> Source code in <code>aiogram_magick/sqlite.py</code> <pre><code>def __init__(self, filepath: str, idle_to_commit: int = 1800):\n    \"\"\"Initalize a SQLite-based storage.\n\n    Args:\n        filepath (str): Path to the database file\n        idle_to_commit (int): Frequency of idling to commit changes (in seconds). It it notable\n            to mention that regardless of this value all changes will be saved anyway when\n            `self.close()` is called. Defaults to `1800`.\n    \"\"\"\n    self.filepath = filepath\n    self.idle_to_commit = idle_to_commit\n\n    self.__last_commit_ts = 0\n    self.__commit: Dict[StorageKey, Dict[str, Union[StateType, Dict[str]]]] = {}\n\n    self.__cache_state = SqliteStorageCache(capacity=20)\n    self.__cache_data = SqliteStorageCache()\n\n    self.__conn: Union[aiosqlite.Connection, None] = None\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorage.__cache_data","title":"__cache_data  <code>instance-attribute</code>","text":"<pre><code>__cache_data = SqliteStorageCache()\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorage.__cache_state","title":"__cache_state  <code>instance-attribute</code>","text":"<pre><code>__cache_state = SqliteStorageCache(capacity=20)\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorage.__commit","title":"__commit  <code>instance-attribute</code>","text":"<pre><code>__commit = {}\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorage.__conn","title":"__conn  <code>instance-attribute</code>","text":"<pre><code>__conn = None\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorage.__last_commit_ts","title":"__last_commit_ts  <code>instance-attribute</code>","text":"<pre><code>__last_commit_ts = 0\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorage.filepath","title":"filepath  <code>instance-attribute</code>","text":"<pre><code>filepath = filepath\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorage.idle_to_commit","title":"idle_to_commit  <code>instance-attribute</code>","text":"<pre><code>idle_to_commit = idle_to_commit\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorage.__connect","title":"__connect  <code>async</code>","text":"<pre><code>__connect()\n</code></pre> Source code in <code>aiogram_magick/sqlite.py</code> <pre><code>async def __connect(self):\n    if self.__conn:\n        return\n\n    aiosqlite.register_adapter(StorageKey, self.__key_to_sqlite)\n    aiosqlite.register_converter('StorageKey', self.__sqlite_to_key)\n\n    # NOTE: Can an aiosqlite connection be handled in a thread-safe way?\n    self.__conn = await aiosqlite.connect(\n        self.filepath, check_same_thread=False, detect_types=PARSE_DECLTYPES\n    )\n    self.__conn.isolation_level = None  # TODO: (Python 3.12 needed) Use .autocommit instead\n    await self.__conn.executescript(\n        'CREATE TABLE IF NOT EXISTS \"aiogram_states\"('\n        '\"Key\"     StorageKey NOT NULL UNIQUE,'\n        '\"State\"   VARCHAR(100) DEFAULT NULL,'\n        '\"Data\"    TEXT,'\n        'PRIMARY KEY(\"Key\")'\n        ');'\n        'CREATE UNIQUE INDEX IF NOT EXISTS \"aiogram_states_keys\" ON '\n        '\"aiogram_states\" (\"Key\");'\n    )\n    await self.__conn.commit()\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorage.__key_to_sqlite","title":"__key_to_sqlite  <code>staticmethod</code>","text":"<pre><code>__key_to_sqlite(key)\n</code></pre> Source code in <code>aiogram_magick/sqlite.py</code> <pre><code>@staticmethod\ndef __key_to_sqlite(key: StorageKey) -&gt; str:\n    return f'{key.bot_id}:{key.chat_id}:{key.user_id}'\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorage.__sqlite_to_key","title":"__sqlite_to_key  <code>staticmethod</code>","text":"<pre><code>__sqlite_to_key(value)\n</code></pre> Source code in <code>aiogram_magick/sqlite.py</code> <pre><code>@staticmethod\ndef __sqlite_to_key(value: str) -&gt; StorageKey:\n    parts = value.split(':')\n    return StorageKey(bot_id=int(parts[0]), chat_id=int(parts[1]), user_id=int(parts[2]))\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorageCache","title":"SqliteStorageCache  <code>dataclass</code>","text":"<pre><code>SqliteStorageCache(cache=list(), keys=list(), length=0, *, capacity=10)\n</code></pre> <p>SQLite cache dataclass.</p>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorageCache.cache","title":"cache  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cache = field(default_factory=list)\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorageCache.capacity","title":"capacity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>capacity = field(default=10, compare=False, kw_only=True)\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorageCache.keys","title":"keys  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>keys = field(default_factory=list)\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorageCache.length","title":"length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>length = 0\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorageCache.add","title":"add","text":"<pre><code>add(key, value)\n</code></pre> <p>Add a new cache entry of <code>key</code>.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>StorageKey</code> <p>Cache key.</p> required <code>value</code> <code>Union[StateType, Dict[str]]</code> <p>Value</p> required Source code in <code>aiogram_magick/sqlite.py</code> <pre><code>def add(self, key: StorageKey, value: 'Union[StateType, Dict[str]]'):\n    \"\"\"Add a new cache entry of `key`.\n\n    Args:\n        key (StorageKey): Cache key.\n        value (Union[StateType, Dict[str]]): Value\n    \"\"\"\n    if self.length == self.capacity:\n        self.keys.pop()\n        self.cache.pop()\n    else:\n        self.length += 1\n\n    self.keys.insert(0, key)\n    self.cache.insert(0, value)\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorageCache.get","title":"get","text":"<pre><code>get(key)\n</code></pre> <p>Get the cache entry of <code>key</code> if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>StorageKey</code> <p>Cache key.</p> required <p>Returns:</p> Type Description <code>Union[StateType, Dict[str], None]</code> <p>Union[StateType, Dict[str], None]: State, data or <code>None</code></p> Source code in <code>aiogram_magick/sqlite.py</code> <pre><code>def get(self, key: StorageKey) -&gt; 'Union[StateType, Dict[str], None]':\n    \"\"\"Get the cache entry of `key` if it exists.\n\n    Args:\n        key (StorageKey): Cache key.\n\n    Returns:\n        Union[StateType, Dict[str], None]: State, data or `None`\n    \"\"\"\n    key_i = self.keys.index(key)\n    self.keys.insert(0, self.keys.pop(key_i))\n    self.cache.insert(0, self.cache.pop(key_i))\n    return self.cache[0]\n</code></pre>"},{"location":"2_-_SQLite_storage.html#aiogram_magick.sqlite.SqliteStorageCache.update","title":"update","text":"<pre><code>update(key, value)\n</code></pre> <p>Update the value for the cache entry of <code>key</code>.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>StorageKey</code> <p>Cache key.</p> required <code>value</code> <code>Union[StateType, Dict[str]]</code> <p>New value</p> required Source code in <code>aiogram_magick/sqlite.py</code> <pre><code>def update(self, key: StorageKey, value: 'Union[StateType, Dict[str]]'):\n    \"\"\"Update the value for the cache entry of `key`.\n\n    Args:\n        key (StorageKey): Cache key.\n        value (Union[StateType, Dict[str]]): New value\n    \"\"\"\n    key_i = self.keys.index(key)\n    self.keys.insert(0, self.keys.pop(key_i))\n    self.cache.insert(0, self.cache.pop(key_i))\n    self.cache[0] = value\n</code></pre>"}]}